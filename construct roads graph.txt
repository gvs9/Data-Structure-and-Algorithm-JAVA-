public class Solution {
  
    public int solve(int A, int[][] B) {
        int[] visited = new int[A+ 1];
        Arrays.fill(visited, -1);

        // build adjacency list
        List<List<Integer>> list = buildAdjacencyList(A, B);

        // it is given that country are already bipartite
        // try to divide the cities into 2 sets
        visited[1] = 1;
        dfs(1, list, visited);

        // separate out the two sets
        int set1Count = 0, set2Count = 0;
        for (int i = 0; i < visited.length; i++) {
            if (visited[i] == 0)
                set1Count++;
            else if (visited[i] == 1)
                set2Count++;
        }

        // totalRoads = (x * y)
        // roads already built = n-1 (B.length)
        long m = 1000000007;
        long totalRoads = (set1Count % m * set2Count % m) % m;
        long newRoads = totalRoads - B.length;

        return (int) newRoads;
    }

    private void dfs(int source, List<List<Integer>> list, int[] visited) {

        // neighbors
        List<Integer> neighbors = list.get(source);
        for (int i = 0; i < neighbors.size(); i++) {
            int currNode = neighbors.get(i);
            if (visited[currNode] == -1) {
                // divide the neighboring city into opposite set
                visited[currNode] = 1 ^ visited[source];
                dfs(currNode, list, visited);
            }
        }
    }

    // build adjacency list for undirected graph
    private List<List<Integer>> buildAdjacencyList(int A, int[][] B) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        for (int i = 0; i <= A; i++) {
            list.add(new ArrayList<Integer>());
        }
        for (int i = 0; i < B.length; i++) {
            int u = B[i][0];
            int v = B[i][1];
            list.get(u).add(v);
            list.get(v).add(u);
        }
        return list;
    }
}  
