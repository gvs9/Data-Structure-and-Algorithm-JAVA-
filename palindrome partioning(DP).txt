public class Solution {
    public int minCut(String A) {
        int n=A.length();
        int dp[][]=new int[n+1][n+1];
        for(int i=0;i<n+1;i++){
            for(int j=0;j<n+1;j++){
                dp[i][j]=-1;
            }
        }
        return minc(A,0,n-1,dp);
    }
public int minc(String A,int i,int j,int dp[][]){

    if(i>=j){
        return 0;
    }

     if(ispalindrome(A,i,j)){
   return 0;
     }

    if(dp[i][j]!=-1){
        return dp[i][j];
    }

    int ans=Integer.MAX_VALUE;
    
    for(int k=i;k<=j-1;k++){
        int temp=minc(A,i,k,dp)+minc(A,k+1,j,dp)+1;
        ans=Math.min(ans,temp);
    }
    
    return dp[i][j]=ans;
}

 public boolean ispalindrome(String A,int i,int j){
    if(i==j){
        return true;
    }
if(i>j){
    return true;
}
    while(i<j){
        if(A.charAt(i)!=A.charAt(j)){
            return false;
        }
             i++;
            j--;
        }
        return true;
    }
}
