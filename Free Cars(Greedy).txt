public class Solution {
     class pair{
            int time;
            int profit;
             public pair(int time,int profit){
                this.time=time;
                this.profit=profit;
            }
        }
        class CustomComparator implements Comparator<pair>{
            public int compare(pair a,pair b){
            return a.time-b.time;
        }
        }
        public int solve(int[] A, int[] B) {
            ArrayList<pair>ans=new ArrayList<>();
            for(int i=0;i<A.length;i++){
                ans.add( new pair(A[i],B[i]));
            }
            Collections.sort(ans,new CustomComparator());
            PriorityQueue<Integer>pq=new PriorityQueue<>();
            int time=0;
            for(int i=0;i<A.length;i++){
                if(time<ans.get(i).time){
                    pq.add(ans.get(i).profit);
                }
                else{
                    time--; 
                    if(pq.peek()<ans.get(i).profit){
                        pq.poll();
                        pq.add(ans.get(i).profit);
                    }
                }
                time++;
            }
            long total=0,mod=(1000*1000*1000)+7;
            while(!pq.isEmpty()){
                total+= pq.poll();
                total%=mod;
            }
return (int)total;
    }
}
