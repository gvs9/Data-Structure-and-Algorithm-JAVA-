import java.util.*;

public class Solution {
	public boolean isvalid(char[][]A,int r,int c,int x){
 
		for(int i=0;i<A.length;i++){

			if(A[i][c]==(char)(x+'0')){
				return false;
			}
		}

		for(int j=0;j<A.length;j++){
			if(A[r][j]==(char)(x+'0')){
				return false;
			}
		}
		//for grid
		int sr=(r/3)*3;
		int sc=(c/3)*3;
		for(int i=sr;i<sr+3;i++){
			for(int j=sc;j<sc+3;j++){
				if(A[i][j]==(char)(x+'0')){
					return false;
				}
			}
		}
		return true;
	}
	public boolean helper(char[][] A,int r,int c){
		if(r==A.length){
			return true ;
		}
		int nr=0;
		int nc=0;
		if(c!=A.length-1){
			nr=r;
			nc=c+1;
		}
		else{
			nr=r+1;
			nc=0;
		}
		if(A[r][c]!='.'){
			if (helper(A,nr,nc)){
				return true;
			}
		}
		else{
			for(int i=1;i<=9;i++){
                if(isvalid(A,r,c,i)){
					A[r][c]=(char)(i+'0');
					if(helper(A,nr,nc))
						return true;
					
					else
						A[r][c]='.';
					
				}
			}
		}
		return false;
	}

	
	public void solveSudoku(char[][] A) {
		helper(A,0,0);
	}
}
