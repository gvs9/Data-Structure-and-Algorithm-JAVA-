public class Solution {

    


 // Add Gloabl Varibles for all possible directions
    // For making the problem easy i have divided it into left(0), right(1), up(2), down(3)
    // Normally we take enum while coding but i have assumed here that Kth index(0 to 3)
    // will denote all possible directions. For example if at index 0 or left if i add dx[0] and dy[0]
    // to my original x,y then my ball will move left and same for other indexs.
    int[] dx = {0, 0, -1, 1};
    int[] dy = {-1, 1, 0, 0};
    // Gloabl Varibles for Queue and Visited Array(It is divided into four halfs where the direction is denoted 
    // by index as i have suggested in above comment)
    Queue<Pair> q = new ArrayDeque<>();
    Vis[][] vis;
    public int solve(int[][] A, int[] B, int[] C) {
        int N = A.length;
        int M = A[0].length;
        vis = new Vis[N][M];
        // Set the start and end position int the variables
        // I have assumed that start and end position will not be same for the questions sake.
        int iSrc = B[0];
        int jSrc = B[1];
        int iDst = C[0];
        int jDst = C[1];
        // Filled my Visited Array
        for(int i=0;i<N;i++)
            for(int j=0;j<M;j++)
                vis[i][j]=new Vis();
        // Add all possible moves from left, right, up, down
        for(int i=0;i<4;i++) {
            int xx = iSrc+dx[i];
            int yy = jSrc+dy[i];
            // If there is no wall and not out of bounds add it to Queue.
            if(xx<N && xx>=0 && yy>=0 && yy<M && A[xx][yy]!=1) {
                q.add(new Pair(xx, yy, i, 1));
            }
        }
        // Ans max value will update it if we find a better path
        int ans = Integer.MAX_VALUE;
        while(!q.isEmpty()) {
            Pair pair = q.poll();
            // Checks if this is the end destination and will ball stop here
            if(pair.i==iDst && pair.j == jDst) {
                if(dstFound(pair, A)) {
                    // Update the ans if the destination is found
                    ans = Math.min(ans, pair.dis);
                    continue;
                }
            }
            // Mark the direction we are coming in from visted
            vis[pair.i][pair.j].dir[pair.dir]=true;
            int dir = pair.dir;
            int xx = pair.i + dx[pair.dir];
            int yy = pair.j + dy[pair.dir];
            // Checks if ball will role to the same direction or else we hit the wall and need to find all 
            // possible directions to go again.
            if(xx>=0 && xx<N && yy>=0 && yy<M && A[xx][yy]!=1) {
                if(!vis[xx][yy].dir[dir])
                    q.add(new Pair(xx, yy, dir, pair.dis+1));
            } else {
                addPossibleDirections(pair.i, pair.j, A, pair.dis);
            }
            
        }
        // Means that we cannot reach the destination
        if(ans==Integer.MAX_VALUE)
            return -1;
        
        return ans;
    }

    

    void updateVisited(Pair pair, Vis[][] vis) {
        vis[pair.i][pair.j].dir[pair.dir]=true;
    }

    void addPossibleDirections(int i, int j, int[][] A, int steps) {
        int N = A.length;
        int M = A[0].length;
        for(int k=0;k<4;k++) {
            int xx = i+dx[k];
            int yy = j+dy[k];
            if(xx<N && xx>=0 && yy>=0 && yy<M && A[xx][yy]!=1 && !vis[xx][yy].dir[k]) {
                //System.out.println("Adding to Queue "+ "Pair-: "+xx+" "+yy+" "+k+" "+(steps+1));
                q.add(new Pair(xx, yy, k, steps+1));
            }
        }
    }

    boolean dstFound(Pair pair, int A[][]) {
        int N = A.length;
        int M = A[0].length;
        int dir = pair.dir;
        int xx = pair.i+ dx[dir];
        int yy = pair.j+ dy[dir];
        if(xx>=0 && xx<N && yy>=0 && yy<M && A[xx][yy]!=1) {
            return false;
        } else {
            return true;
        }
    }
}

class Pair {
    int i, j, dir, dis;
    // direction 0-> left 1-> right 2-> up 3-> down
    Pair(int i, int j, int dir, int dis) {
        this.i=i;
        this.j=j;
        this.dir=dir;
        this.dis=dis;
    }
}

class Vis {
    boolean[] dir = new boolean[4];
}

