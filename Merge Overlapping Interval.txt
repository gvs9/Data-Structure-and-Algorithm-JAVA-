/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
                      int n=intervals.size();
                      //input as[[1,4][2,5][6,9]]
                      //if it contains only [1,4] return as it is
                      if(n<2){
                          return interval;
                      }
                      //take ans to return output
                      ArrayList<Interval> ans=new ArrayList<>();
                      //sort on increasing start time
       Collections.sort(intervals,(a,b)->Integer.compare(a.start-b.end)); 

       Interval curr=intervals.get(0);
       int start=curr.start; // 1
       int end=curr.end;//4

       for(int i=1;i<n;i++){
           curr=intervals.get(i);//we will get[2,5]
           if(curr.start<=end){//merge only if start of curr<=end i.e{2<4}
               end=Math.max(end,curr.end); //update the end of merge array by considering the maximum  i.e [1,4][2,5] take end as 5
           }
           else{
               ans.add(new intervals(start,end));//add merge array to list i.e [1,5]
               start=curr.start;//[6]
               end=curr.end;//[9]
           }

       }
       add.intervals(start,end);//[6,9]
       return ans; //[1,5][6,9]
    }
}
